{"posts":[{"title":"Linux获取IP地址的几种方法","text":"#前言 如果你财力雄厚，树莓派大大小小配件和外设都有，你大可以外接显示器进行开发，但如果你像我这样的 ~~ 穷逼 ~~ 没有外设，获取设备的ip地址就非常重要，只有获取到ip地址才可以连接你的设备，所以此文章介绍几种简单获取设备ip的方法。 !!!Ps：此教程仅限家庭路由器或手机个人热点，如果是校园网这种有AP隔离的无线网络则不适用。!!! #无I/O设备下获取IP ###1.Advanced IP Scanner官网下载Advanced IP Scanner软件打开，扫描，排除你的手机和电脑还有路由器剩下的就是你的IP ###2.Windows cmd用你的电脑按住Ctrl+R，输入cmd打开命令行，在命令提示符输入arp -a便可以看到所有设备的IP，其中类型为动态的才是相对应的IP地址，同样排除掉手机与电脑，剩下的就是设备的IP ###3.Android Fing如果你用电脑不太方便也可以使用Android系统上的Fing软件，在蓝奏云下载Fing，连接与树莓派等设备同一wifi打开应用开始扫描，扫描完成后，看你的需求获取IP即可 #有I/O设备下获取IP最后顺便说说有外设如何获取IP，只用在键盘敲入ifconfig就可以获取到各网卡的ip地址了 #####当获取完IP地址之后就可以方便的SSH和VNC远程访问桌面了","link":"/2021/11/17/IP/"},{"title":"最好的状态","text":"123#include &lt;iostream&gt;#include &lt;Fei.h&gt;using namespace std; 123456789int main() { while(ture) { learn(); code(); sleep(); } return 0;}","link":"/2022/04/05/%E6%9C%80%E5%A5%BD%E7%9A%84%E7%8A%B6%E6%80%81/"},{"title":"我的常用MarkDown语法练习","text":"前言 逛Github的时候一直很好奇根目录为什么总有一个.md为后缀的文件，直到用Typecho写博文的时候才知道Github和CSDN那些有目录代码有高亮的文章都是用Markdown语言写的，所以我总结练习一下常用的md基础语法。 #1.基础语法##1.1 字体设置斜体、粗体、删除线 12345*倾斜文本*_倾斜文本_**加粗文本*****加粗倾斜文本***~~删除线文本~~ 效果:倾斜文本倾斜文本加粗文本加粗倾斜文本删除线文本##1.2 分级标题 1234#一级标题##二级标题###三级标题####四级标题 效果：#一级标题##二级标题###三级标题####四级标题 ##1.3 链接 123[链接描述][1] [1]: http://www.baidu.com 效果: 链接描述 ##1.4 图片 123![图片描述][1][1]:https://pb.nichi.co/boat-crazy-snow 效果： ##1.5 分割线 123---***___ 效果: ##1.6 行内代码 1`行内代码` 效果: 行内代码 ##1.7 代码快用“`````”这个叫单反引号，需要连续三个，如果需要代码高亮，可以在后面加c,python,css等，如: ```pythonimport timeprint(‘Hello 小笨蛋’)time.sleep(30)``` 效果: 123import timeprint('Hello Fei')time.sleep(30) ##1.8 表格 1234表头|费三|林四---|:--:|---:IQ|150|60EQ|50|50 效果 表头 费三 林四 IQ 150 60 EQ 50 50","link":"/2021/11/03/markdown/"},{"title":"回家的诱惑","text":"#先看效果 ###两种方法进入 网站右上角菜单点“陕西疫情实况” 点我点我 #前言娃只是想过年回家，所以写个小脚本看看每天的情况，代码写的像老奶奶的裹jio布———又臭又长，将就下将就下。 #思路#####太懒了，先写个框架贴个代码，以后再补上###用到的库… #实现###Table部分…###Map部分…###Event部分…###构建Markdown…###写入MySQL… #全部代码 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175import requestsimport jsonimport timeimport reimport pymysqlfrom pyecharts import options as optsfrom pyecharts.charts import Map# 表格部分-----------------------------------------------------------------------table_head = '''&lt;!--markdown--&gt;#陕西疫情!!!&lt;h5 align=&quot;center&quot;&gt;&lt;font size=&quot;2&quot;&gt;%s &lt;table border='1' align=&quot;center&quot;&gt; &lt;tr align=&quot;center&quot;&gt; &lt;th bgcolor=&quot;#F1F5F8&quot; &gt;&lt;span&gt;地区&lt;/span&gt;&lt;/th&gt; &lt;th bgcolor=&quot;#E7EFFC&quot; &gt;&lt;span style=&quot;color:blue&quot;&gt;新增确诊&lt;/span&gt;&lt;/th&gt; &lt;th bgcolor=&quot;#FCEEED&quot; &gt;&lt;span style=&quot;color:red&quot;&gt;累计确诊&lt;/span&gt;&lt;/th&gt; &lt;th bgcolor=&quot;#EAF7ED&quot; &gt;&lt;span style=&quot;color:green&quot;&gt;治愈&lt;/span&gt;&lt;/th&gt; &lt;th bgcolor=&quot;#F2F2F2&quot; &gt;&lt;span style=&quot;color:gray&quot;&gt;死亡&lt;/span&gt;&lt;/th&gt; &lt;/tr&gt;'''table_mid = ''table_core = ''' &lt;tr align=&quot;center&quot;&gt; &lt;td&gt;%s&lt;/td&gt; &lt;td style=&quot;color:blue&quot;&gt;%s&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;td&gt;%s&lt;/td&gt; &lt;tr&gt;'''table_foot = '''&lt;/table&gt;&lt;/font&gt;&lt;/h5&gt;&lt;p align=&quot;right&quot;&gt;数据来源:陕西卫健委&lt;/p&gt;!!!'''todayKey = 'today'totalKey = 'total'confirmKey = 'confirm'nowConfirmKey = 'nowConfirm'nameKey = 'name'childrenKey = 'children'healKey = 'heal'deadKey = 'dead'info_lists = []mapNowConfirm = []mapCityName = []api = 'https://view.inews.qq.com/g2/getOnsInfo?name=disease_h5'datas = json.loads(requests.get(url=api).json()['data'])dataLog = '更新时间：' + datas['lastUpdateTime']for contry in datas['areaTree']: if contry[nameKey] == '中国': for province in contry[childrenKey]: if province[nameKey] == '陕西': for city in province[childrenKey]: cityName = city[nameKey] newConfirm = str(city[todayKey][confirmKey]) if newConfirm == '0': newConfirm = '-' nowConfirm = str(city[totalKey][nowConfirmKey]) heal = str(city[totalKey][healKey]) dead = str(city[totalKey][deadKey]) info_lists.append((cityName, newConfirm, nowConfirm, heal, dead)) if city[nameKey] == '杨凌' or city[nameKey] == '韩城' or city[nameKey] == '境外输入' or city[nameKey] == '地区待确认': pass else: mapCityName.append(city[nameKey] + '市') mapNowConfirm.append(city[totalKey][nowConfirmKey]) # 生成地图现有确诊intfor info_tuple in info_lists: table_mid = table_mid + table_core%info_tupletable_head = table_head%dataLog# ------------------------------------------------------------------------------# 地图部分-------------------------------------------------------c = ( Map() .add(&quot;陕西&quot;, [list(z) for z in zip(mapCityName, mapNowConfirm)], &quot;陕西&quot;) .set_global_opts( title_opts=opts.TitleOpts(title=&quot;现存确诊&quot;), visualmap_opts=opts.VisualMapOpts(max_=1000) ) .render('map.html'))map_f = open('map.html', 'r')map_html = '''!!!&lt;h1&gt;疫情地图&lt;/h1&gt;&lt;h4&gt;&lt;a onclick=&quot;javascript:location.reload()&quot;&gt;地图无显示点我刷新&lt;/a&gt;&lt;/h4&gt;!!!!!!''' + map_f.read()\\ .replace('style=&quot;width:900px; height:500px;', 'style=&quot;width:350px; height:600px;')\\ .encode('utf-8').decode(&quot;unicode_escape&quot;) + '!!!'# -------------------------------------------------------------# 新闻部分------------------------------------------------------------------------event_head = '''#实时播报---!!!'''event_mid = ''event_core = '''&lt;div&gt;&lt;font size=&quot;2&quot;&gt;%s&lt;/font&gt; &lt;font size=&quot;2&quot; style=&quot;float:right;&quot;&gt;%s&lt;/font&gt;&lt;h4&gt;&lt;a href=&quot;%s&quot;&gt;%s&lt;/a&gt;&lt;/h4&gt;&lt;HR&gt;&lt;/div&gt;'''event_foot = '''!!!'''eventurl = 'https://opendata.baidu.com/data/inner?tn=reserved_all_res_tn&amp;dspName=iphone&amp;from_sf=1&amp;dsp=iphone&amp;resource_id=28565&amp;alr=1&amp;query=%E5%9B%BD%E5%86%85%E6%96%B0%E5%9E%8B%E8%82%BA%E7%82%8E%E6%9C%80%E6%96%B0%E5%8A%A8%E6%80%81&amp;cb=jsonp_1640626876490_59176'event_r = requests.get(eventurl).content.decode('unicode_escape')eventDescriptions = re.findall('&quot;eventDescription&quot;:&quot;(.*?)&quot;', event_r)eventUrls = re.findall('&quot;eventUrl&quot;:&quot;(.*?)&quot;', event_r)siteNames = re.findall('&quot;siteName&quot;:&quot;(.*?)&quot;', event_r)times = []eventTimes = []for strtime in re.findall('&quot;eventTime&quot;:&quot;(.*?)&quot;', event_r): times.append(int(strtime))for i in times: timeArray = time.localtime(i) strTime = time.strftime(&quot;%m月%d日 %H:%M&quot;, timeArray) eventTimes.append(strTime)for i in range(20): event_tuple = (siteNames[i], eventTimes[i], eventUrls[i], eventDescriptions[i]) event_mid = event_mid + event_core%event_tuple# ---------------------------------------------------------------------------------# 输出md文档txt----------------------------------------------------------------------------mdtext = table_head + table_mid + table_foot + map_html + event_head + event_mid + event_footmdtext = mdtext.replace('&quot;', '\\\\&quot;').replace(&quot;'&quot;, &quot;\\\\'&quot;)#----------------------------------------------------------------------------------------同步到mysqldb = pymysql.connect(host='localhost', user='root', password='peerless187', database='typecho')cursor = db.cursor()sql = &quot;UPDATE typecho_contents SET text = &quot; + '&quot;%s&quot;'%mdtext + &quot; WHERE cid = 111&quot;try: cursor.execute(sql) db.commit()except: db.rollback()db.close()print(mdtext)","link":"/2021/12/30/%E5%9B%9E%E5%AE%B6%E7%9A%84%E8%AF%B1%E6%83%91/"},{"title":"树莓派系统烧录并开机","text":"#1.树莓派4B硬件配置###核心CPU：Broadcom BCM2711，1.5 GHz，64-bit，4核心，ARM Cortex-A72 架构，1MB shared L2 cache RAM：1、2、4 GB LPDDR4-3200 RAM (shared with GPU) ###网络以太网：10/100/1000 Mbit/s 无线网：b/g/n/ac 双频 2.4/5 GHz 蓝牙：5.0 ###多媒体GPU：Broadcom VideoCore VI @ 500 MHz HDMI：micro-HDMI DSI：板载排线 ###外围设备17× GPIO plus the same specific functions, HAT, and an additional 4× UART, 4× SPI, and 4× I2C connectors ###接口引脚图 #2.官方Raspbian Buster系统的烧录 ###下载镜像文件在官网下载树莓派镜像到电脑官方os有三个版本，Full完整版Desktop桌面版和Lite精简版，精简版没有桌面环境，因为我拿树莓派来当typecho服务器所以我比较喜欢和偏向精简版，对于刚接触树莓派的同孩我还是比较推荐有桌面环境的版本 ###格式化Micro SD卡将SD卡插入读卡器连接电脑使用工具SDFormatter格式化Micro SD卡选择SD卡点格式化 ###烧录系统到SD卡用Win32 Disk Imager将解压出的Raspbian系统镜像文件烧录进Micro SD卡烧录完成后SD卡会分成3个区boot，系统和闲置!!!注意:烧录完成后系统会提示SD卡不可用需要格式化，不要格式化！！不要格式化！！不要格式化！！同时不要拔出读卡器，先看下一步操作！!!!###开启SSH并配置无线连接如果你像我一样穷，买不起显示器键盘…只有单独的树莓派板子，为了能控制树莓派你必须开启ssh并连上wifi。在boot分区新建一个名叫ssh的空文件便可以开启系统ssh设置再在boot新建wpa_supplicant.conf文件，写入无线的相关配置，如下。 12345678910111213141516country=CNctrl_interface=DIR=/var/run/wpa_supplicant GROUP=netdevupdate_config=1 network={ ssid=&quot;这里面写wifi名&quot; psk=&quot;这里填密码&quot; key_mgmt=WPA-PSK #如果为无密码，此参数填NONE，并把psk参数删除 priority=3 #此参数为wifi优先级，不填默认为2，数字越大越优先} network={ ssid=&quot;其他wifi名&quot; psk=&quot;还是密码&quot; key_mgmt=WPA-PSK} 配置完成后可拔出SD卡 #3.启动树莓派将树莓派放在刚刚配置的wifi环境之下，再将SD卡插到树莓派背面的卡槽中，接通电源开机。当你看到树莓派主板上红色电源指示灯亮起，绿色指示灯闪烁说明系统已经开始启动。 ###登录树莓派因为没有外设（显示器，键盘，鼠标等）连接，你是无法直接控制树莓派的，此时就需要通过SSH工具连接树莓派。#####获取树莓派ip登录你的路由器管理后台，或者用网段扫描工具获取树莓派的ip，详细可参考《树莓派获取IP的几种方法》#####用PuTTY连接树莓派在PuTTY官网下载PuTTY工具，打开输入树莓派ip，点击open登录树莓派初始默认用户为pi初始密码为raspberry登陆后先修改pi和root账户密码 12sudo passwd pisudo passwd root 此时就登录完成了","link":"/2021/11/13/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"title":"《C++学习》 - 常用查找算法练习","text":"find()功能查找指定元素，返回迭代器，如没有返回结束迭代器end() 参数 iterator begin //容器开始迭代器 iterator end //容器结束迭代器 value //元素值 find_if()功能按照条件查找指定元素，返回迭代器，如没有返回结束迭代器end() 参数 iterator begin //容器开始迭代器 iterator end //容器结束迭代器 _Pred //函数或者谓词（返回bool类型的仿函数） find,find_if示例123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141// 常用查找算法find, find_if#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;string&gt;#include &lt;vector&gt;using namespace std;// find算法 void test01() { vector&lt;int&gt; v; // 插入数据 for(int i = 0; i &lt; 10; i++) { v.push_back(i); } // find算法使用，返回迭代器 vector&lt;int&gt;::iterator it = find(v.begin(), v.end(), 6); // 如果找到返回含有该值的迭代器，如果没有返回v.end() if(it != v.end()) { cout &lt;&lt; &quot;查找的结果是：&quot; &lt;&lt; *it &lt;&lt; endl; } else { cout &lt;&lt; &quot;未找到结果&quot; &lt;&lt; endl; }}class Person { public: Person(string name, int age) { this-&gt;m_Age = age; this-&gt;m_Name = name; } // 重载==符号，使得Person对象可以对比 bool operator==(const Person &amp;p) { if(this-&gt;m_Age == p.m_Age &amp;&amp; this-&gt;m_Name == p.m_Name) { return true; } else { return false; } } int m_Age; string m_Name; };void test02() { vector&lt;Person&gt; v; // 创建对象 Person p1(&quot;林三&quot;, 20); Person p2(&quot;李四&quot;, 25); Person p3(&quot;王五&quot;, 30); Person p4(&quot;费六&quot;, 18); // 插入Person对象 v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); // 查找 vector&lt;Person&gt;::iterator it = find(v.begin(), v.end(), p4); if(it != v.end()) { cout &lt;&lt; &quot;查找的对象：&quot; &lt;&lt; endl; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;\\t年龄：&quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; } else { cout &lt;&lt; &quot;未找到对象&quot; &lt;&lt; endl; } }// 判断Person类m_Age是否大于19，返回布尔值 class GreaterAge19 { public: bool operator()(const Person &amp;p){ if(p.m_Age &gt; 19) { return true; } else { return false; } }};void test03() { vector&lt;Person&gt; v; // 创建对象 Person p1(&quot;林三&quot;, 20); Person p2(&quot;李四&quot;, 25); Person p3(&quot;王五&quot;, 30); Person p4(&quot;费六&quot;, 18); // 插入Person对象 v.push_back(p1); v.push_back(p2); v.push_back(p3); v.push_back(p4); // 按条件查找，第三个参数需传入谓词 vector&lt;Person&gt;::iterator it = find_if(v.begin(), v.end(), GreaterAge19()); if(it != v.end()) { cout &lt;&lt; &quot;查找到结果：&quot; &lt;&lt; endl; cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; it-&gt;m_Name &lt;&lt; &quot;\\t年龄：&quot; &lt;&lt; it-&gt;m_Age &lt;&lt; endl; } else { cout &lt;&lt; &quot;未查找到结果&quot; &lt;&lt; endl; } }int main() { // // find算法查找标准数据类型 // test01();// // // find算法查找自定义数据类型// test02(); // find_if算法 按条件查找 自定义数据类型 test03(); } adjacent_find()功能查找相邻重复的元素，返回迭代器，如没有返回结束迭代器end() 参数 iterator begin //容器开始迭代器 iterator end //容器结束迭代器 value //元素值 binary_search()功能查找相邻重复的元素，返回迭代器，如没有返回结束迭代器end() 参数 iterator begin //容器开始迭代器 iterator end //容器结束迭代器 value //元素值 注意binary_search返回的是bool值，速度快，但不适用于无序的序列比如vector中值无序也无法使用该算法 adjacent_find&amp;binary_search示例1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768// 不常用但是面试可能会出现的STL算法函数#include &lt;iostream&gt;#include &lt;algorithm&gt;#include &lt;vector&gt;using namespace std;// adjacent_find - 查找“相邻重复”的元素 void test01() { vector&lt;int&gt; v; // 插入元素 v.push_back(2); v.push_back(1); v.push_back(3); v.push_back(7); v.push_back(3); v.push_back(3); v.push_back(0); // 使用adjacent_find(),返回一个迭代器 vector&lt;int&gt;::iterator pos = adjacent_find(v.begin(), v.end()); if(pos != v.end()) { cout &lt;&lt; *pos &lt;&lt; endl; // 返回结果3 } else { cout &lt;&lt; &quot;未查找到元素&quot; &lt;&lt; endl; } }// binary_search二分搜索 void test02() { vector&lt;int&gt; v; // 插入元素 v.push_back(2); v.push_back(1); v.push_back(3); v.push_back(7); v.push_back(3); v.push_back(3); v.push_back(0); // binary_search返回的是布尔值，速度快，但不适用于无序的序列 // 注意：不是无序容器，而是无序序列，比如vector中值无序也无法使用该算法 bool result = binary_search(v.begin(), v.end(), 2); if(result) { cout &lt;&lt; &quot;值存在&quot; &lt;&lt; endl; // 结果是true或false，因为此例中vector值无序 } else { cout &lt;&lt; &quot;值不存在&quot; &lt;&lt; endl; } } int main() { test01(); test02(); return 0;}","link":"/2022/04/16/%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"},{"title":"我在校园真真假假条","text":"# 前言 我们宿舍某人老是让我给他p假条，我不说是谁，所以我嫌麻烦就写了个简单的小代码，通过python的PIL库编辑图片，然后学了点php和html将它上线到我的小博客 尝试本来是想用html加css直接模拟出我在校园的界面的，但是我找遍了全网都找不到我在校园的源码，后来想想我在校园是微信小程序，就算是有源码要做出相同的界面还需要我在校园的图片资源，这大大增加了复杂度，所以我另辟蹊径想到可以采用p图的方式来直接得到图片。 实现效果先看效果点我点我 思路用户登录我的小网站通过HTML传入form表格给后端PHP文件，PHP文件执行python生成图片，再通过PHP显示在前端，从而实现通过传入参数自动生成假条 准备 一张去除信息的假条背景 手机字体ttf文件，如“小米兰亭” 一个网站服务器 python，PHP环境 头发 代码部分1234567891011121314151617181920212223242526272829303132333435363738394041424344454647from PIL import Image, ImageDraw, ImageFont # 导入PIL库bg_img_path = 'bg.jpg' # 背景图片路径bg_img = Image.open(bg_img_path) # 实例化图片def font(ttf_path, size): return ImageFont.truetype(ttf_path, size)fp = open('info.txt', 'r', encoding='utf-8') # 打开php保存的txt文件info = fp.readlines() # 将信息读取到info列表up_time = info[0].strip('\\n') # 将参数分别赋值给变量name = info[1].strip('\\n')start_time = info[2].strip('\\n').replace('T', ' ') # HTML表格传入的时间信息日期与时间之间为T分割，所以需要将T替换为空格end_time = info[3].strip('\\n').replace('T', ' ')is_leave = info[4].strip('\\n')school = info[5].strip('\\n')phone = info[6].strip('\\n')reason = info[7].strip('\\n')approve_time = info[8][5:].strip('\\n').replace('T', ' ').replace('-', '.')date_time = info[9].strip('\\n')font_color = (0, 0, 0) # 初始字体颜色time_xy = (175, 39) # 手机时间坐标name_xy = (237, 297) # 姓名坐标start_time_xy = (358, 491) # 开始时间坐标end_time_xy = (358, 581) # 结束时间坐标is_leave_xy = (357, 672) # 是否离校school_xy = (287, 782) # 校区坐标phone_xy = (370, 873) # 电话坐标reason_xy = (287, 968) # 理由坐标approve_time_xy = (795, 1158) # 审批通过时间坐标draw = ImageDraw.Draw(bg_img) # 实例画板draw.text(time_xy, up_time, (255, 255, 255), font('heavy.ttf', 32)) # 写入文字# 写入文字用法 draw.text(坐标, 文本, 字体颜色, font('字体文件.ttf', 字号))draw.text(name_xy, name, font_color, font('normal.ttf', 44))draw.text(start_time_xy, start_time, font_color, font('medium.ttf', 55))draw.text(end_time_xy, end_time, font_color, font('medium.ttf', 55))draw.text(is_leave_xy, is_leave, font_color, font('normal.ttf', 61))draw.text(school_xy, school, font_color, font('normal.ttf', 43))draw.text(phone_xy, phone, font_color, font('thin.ttf', 43))draw.text(reason_xy, reason, font_color, font('normal.ttf', 43))draw.text(approve_time_xy, approve_time, font_color, font('thin.ttf', 41))bg_img.save('./photos/'+ name + date_time + '.jpg') # 保存图片print('假条生成成功') 网页HTML12345678910111213141516171819202122232425262728!!!&lt;!doctype html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; id=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt; &lt;/head&gt; &lt;body&gt; &lt;form action=&quot;http://feiblog.top/jiatiao/info_post.php&quot; method=&quot;post&quot; &gt; &lt;h3&gt; 手机时间：&lt;br/&gt;&lt;input type=&quot;time&quot; name=&quot;up_time&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 姓名：&lt;br/&gt;&lt;input type=&quot;text&quot; name=&quot;name&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 开始时间：&lt;br/&gt;&lt;input type=&quot;datetime-local&quot; name=&quot;start_time&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 结束时间：&lt;br/&gt;&lt;input type=&quot;datetime-local&quot; name=&quot;end_time&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 是否离校：&amp;nbsp;&amp;nbsp;&lt;input type=&quot;radio&quot; name=&quot;is_leave&quot; value=&quot;否&quot; checked&gt;否&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input type=&quot;radio&quot; name=&quot;is_leave&quot; value=&quot;是&quot;&gt;是&lt;br/&gt;&lt;br/&gt; 销假校区：&amp;nbsp;&amp;nbsp;&lt;input type=&quot;radio&quot; name=&quot;school&quot; value=&quot;石鼓校区&quot; checked&gt;石鼓 &lt;input type=&quot;radio&quot; name=&quot;school&quot; value=&quot;高新校区&quot;&gt;高新&lt;br/&gt;&lt;br/&gt; 紧急联系电话：&lt;br/&gt;&lt;input type=&quot;text&quot; name=&quot;phone&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 理由：&lt;br/&gt;&lt;input type=&quot;text&quot; name=&quot;reason&quot;/&gt;&lt;br/&gt;&lt;br/&gt; 审批通过时间：&lt;br/&gt;&lt;input type=&quot;datetime-local&quot; name=&quot;approve_time&quot;/&gt;&lt;br/&gt;&lt;br/&gt; &lt;h3 align=&quot;right&quot;&gt; &lt;input type=&quot;submit&quot; value=&quot;提交&quot; style=&quot;width: 100px;height: 40px;border-radius: 5px;border: none;&quot; &gt;&lt;/h3&gt; &lt;/h3&gt; &lt;/form&gt; &lt;/body&gt;&lt;/html&gt;!!! PHP12345678910111213141516171819202122232425262728293031&lt;html&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; id=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;&lt;/head&gt;&lt;body&gt;&lt;?php // header(&quot;refresh:3;url=jiatiao.html&quot;); $up_time=$_POST['up_time']; $name=$_POST['name']; $start_time=$_POST['start_time']; $end_time=$_POST['end_time']; $is_leave=$_POST['is_leave']; $school=$_POST['school']; $phone=$_POST['phone']; $reason=$_POST['reason']; $approve_time=$_POST['approve_time']; $datetime=date(&quot;dHms&quot;); $txt=$up_time.&quot;\\n&quot;.$name.&quot;\\n&quot;.$start_time.&quot;\\n&quot;.$end_time.&quot;\\n&quot;.$is_leave.&quot;\\n&quot;.$school.&quot;\\n&quot;.$phone.&quot;\\n&quot;.$reason.&quot;\\n&quot;.$approve_time.&quot;\\n&quot;.$datetime; $fp=fopen(&quot;info.txt&quot;,'w'); fwrite($fp,$txt); fclose($fp); $photo_name=$name.$datetime.&quot;.jpg&quot;; $output=exec(&quot;python ./jiatiao_main.py&quot;); echo &quot; &quot;; echo &quot;&lt;h5 align='center'&gt;&lt;img width='270' height='585' src='./photos/$photo_name'&gt;&lt;/h5&gt;&quot;; echo &quot;&lt;h2 align='center'&gt;&lt;a href='./photos/$photo_name' download='./photos/$photo_name'&gt;点击下载图片&lt;/a&gt;&lt;/h2&gt;&quot;;?&gt;&lt;/body&gt;&lt;/html&gt;","link":"/2021/12/16/%E7%9C%9F%E7%9C%9F%E5%81%87%E5%81%87%E6%9D%A1/"},{"title":"《C++学习》 - STL常用遍历算法练习","text":"12345// STL常用遍历算法练习#include &lt;iostream&gt;#include &lt;vector&gt;#include &lt;algorithm&gt; //导入算法库 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354using namespace std;// transform传送规则，需要以仿函数的方式传入class MyTransform { public: int operator()(int val) { return val * 2; }}; // 以仿函数的方式遍历打印 class Print02 { public: void operator()(int val) { cout &lt;&lt; val &lt;&lt; &quot; &quot;; }};// 以函数方式 void print01(int val) { cout &lt;&lt; val &lt;&lt; &quot; &quot;;}int main() { vector&lt;int&gt; v; for(int i = 0; i &lt; 10; i++) { v.push_back(i); } vector&lt;int&gt; vTarget; // for_each遍历打印 for_each(v.begin(), v.end(), print01); cout &lt;&lt; endl; for_each(v.begin(), v.end(), Print02()); cout &lt;&lt; endl; // transform遍历打印并拷贝目标容器 // 在传送前需开辟目标容器的空间 vTarget.resize(v.size()); transform(v.begin(), v.end(), vTarget.begin(), MyTransform()); // 遍历查看目标容器传送后的值 for_each(vTarget.begin(), vTarget.end(), print01); return 0;}","link":"/2022/04/16/%E9%81%8D%E5%8E%86%E7%AE%97%E6%B3%95/"},{"title":"《C++学习》 - Struct结构体初识","text":"现阶段感觉cpp中的结构体像是python中类 结构体(类)定义Python类 12345678910111213class Student: '''学生类''' def __init__(self): '''初始化方法''' self.name = &quot;张三&quot; self.age = 18 self.score = 100 def learn(self): '''学习方法''' ... pass C++结构体1234567891011121314#include &lt;iostream&gt;using namespace std;#include &lt;string&gt;int main(){ struct Student{ // 定义属性 string name = &quot;张三&quot;; int age = 18; int score = 100; } system(&quot;pause&quot;); return 0;} 结构体(类)调用python12345678910111213# 实例化类a = Student()print(&quot;姓名：{} 年龄：{} 分数：{}&quot;\\ .format(a.name, a.age, a.score))# 姓名：张三 年龄：18 分数：100# 赋值a.name = &quot;李四&quot;print(a.name)# 李四 C++12345678910// 实例化结构体Student a;cout &lt;&lt; &quot;姓名：&quot; &lt;&lt; a.name &lt;&lt; &quot; 年龄：&quot; &lt;&lt; a.age &lt;&lt; &quot; 分数：&quot; &lt;&lt; a.score &lt;&lt; endl;// 姓名：张三 年龄：18 分数：100// 赋值a.name = &quot;李四&quot;；cout &lt;&lt; a.name &lt;&lt; endl;// 李四 总结C++中的结构体不管是定义或者是实例化都与python相似，前期我简单的理解为面向对象，尤其是都用“.”来调用方法或者属性","link":"/2022/03/27/%E7%BB%93%E6%9E%84%E4%BD%93%E5%88%9D%E8%AF%86/"},{"title":"逐渐离谱的羽毛球计数器","text":"成品先看看这一波七八折的成品 当时应该加两个耳朵，变成Bilibili小电视📺 需求 1.能进行羽毛球比赛计数 2.能用 3.能看 方案方案1因为需求比较简单，最开始的想法其实很简单，大概就是画个羽毛球形状的的PCB板子，然后在板子上放上数码管可以显示比分，两个按钮可以分别给两边的人加分，然后写个小程序可以计分。听起来很简单，其实做起来也简单，但是当我打开淘宝搜数码管的时候他们一个个都长这样再结合我的需求，岂不是长这样 这也太丑了，丑哭我了送人狗都不要果断放弃下一个 方案2既然方案一嫌数码管太丑，我去掉数码管不就行了，用7个LED灯控制一位数字，组成一个８字，这样PCB板子上就不会突起这么高，但是这样的话要用（4*7+2）30个LED灯组成四位数字和中间两点，同时控制这么多灯肯定要用到单片机才能简洁美观，用到单片机控制就要设置单片机最小系统，最少也得用到晶振电容，加上30个灯，未免电路也太庞大复杂了，这个方案也GG了。 方案n越弄越复杂，干脆直接上了OLED屏幕和单片机，采用IIC通信协议的OLED屏幕只用连接两个线，电路简单方便，显示也比30个LED灯好，上单片机也就不用硬件编程用那么多逻辑门了，正好碰上STM单片机降价，这不屯一手，又双ruozhuo出现了问题，淘宝1.3寸单色OLED屏幕居然比2寸的LCD全彩屏幕都贵，而PCB板子大，屏幕小，屏占比还不高，用到屏幕为了续航还要加上锂电池供电，供电电路又是一大坨，方案还算成熟就是画出来丑，当时的方案稿👇 方案n+1思路还是上一个的思路，只不过这次为了好看点，必须得上3D打印了，这样有了3D打印外壳，就可以上锂电池了，而且可以把丑陋的按键放在侧边了，同时升级屏幕为2寸LCD全彩屏幕，屏占比也高了起来，屏幕大了电池就可以跟着一起大了，PCB的空间也大了，可以塞更多东西了。说干就干 制作原理图这玩意画到吐血，修修补补查资料画了4，5天，1天赶完PCB就在嘉立创白嫖下单了嘉立创YYDS 下单后就要开始采购电阻电容单片机按钮按键等等等登物料了，按着画的原理图生成物料清单，开始采购，太难了，基本上一个容值阻值的电阻电容就用一两个，但是商家一次发货就是最低100个起，不过这些都是几块钱，最贵的还是主控芯片还有电源管理芯片啥的，不过这些基本都可以单卖9月10号PCB板子到了👇 9月12号一早所有的物料全部到齐，很巧的是，这个时候我正在学FLASH存储芯片，顺便搜了搜STM32F103C8T6的存储空间，是64K，什么意思，就是说我如果不扩展存储，我连一张彩色图片都显示不了，甚至只能显示几个汉字，这个时候已经感觉寄了，万念俱灰的取了快递，然后连忙修改原理图重新画PCB，晚上又下了一单，然后15号新的PCB板子还没到，我又又又发现了问题，几个LED灯没有接限流电阻，可能会烧坏，我真…再改！这一次我顺便加了个喇叭一个LED灯和一个温度传感器，终于没问题了（最终的板子和原理图 当然背面是最好看的只能说什么：不忘初心！！ 19号拿到板子马上就开始焊元器件这个芯片是真的小，每个引脚的间隔只有0.5mm，弯着腰在桌子上焊了三个小时才焊好，但是焊完是真的有成就感，焊的第一个PCB板子 点亮最激动人心的莫过于自己亲手焊好自己设计的板子，然后能成功的点亮她！先烧写一个简单的LED灯闪烁的程序 1234567891011121314151617#include &quot;stm32f10x.h&quot;#include &quot;led.h&quot;int main(){ // LED初始化 LED_Init(); // LED循环开关 while(1) { LED_ON; delay_ms(500); LED_OFF; delay_ms(500); }} 成功了！！！一看表已经快1点了睡！ 程序果然给自己喜欢的东西写程序，代码敲的就是快，焊完板子第二天一早就起来移植完了LCD屏幕的驱动代码，接下来就是为期10天喜闻乐见的掉头发环节 枯燥乏味，草稿还用了我小半个本子，还刚好30号搞完，弄完看代码和老婆婆的裹脚布一样又臭又长，开源备份到我的Github，当然功能还可以再加只是时间不够了，后面再慢慢更新。 外壳用到光固化3D打印，缝合致敬了别的开源项目，自己照着改了改 组装本来想用B7000粘屏幕的，结果三瓶都干掉了，找了半天就只有502，粘的时候屏幕上有一些残留，我脑子抽抽了用镊子刮了刮，结果边边划了几道印子😡 踩得坑 显示图片要加FLASH扩展存储空间 AMS1117要有1.3V压差才能正常工作，所以不能直接用于锂电池转3.3V，因为锂电池的电压区间为3.0-4.2V，达不到1.3V压差 tp4056为线性元器件，在高压降时发热严重，需要考虑散热 锂电池充电电流在0.3C左右合适，所以我的1000mAh电池，应用300mA电流合适，所以需要在tp4056电源管理芯片加4k的电阻 屏幕上有胶水不要用金属镊子 LED灯需要加限流电阻，保LED也保MCU 焊排线的时候要用吸锡带，防止连锡 MCU的旁路电容和滤波电容要挨着MCU放 用洗板水要通风 总结爽😝","link":"/2022/09/30/%E7%BE%BD%E6%AF%9B%E7%90%83/"}],"tags":[{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"MarkDown","slug":"MarkDown","link":"/tags/MarkDown/"},{"name":"树莓派","slug":"树莓派","link":"/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"嵌入式","slug":"嵌入式","link":"/tags/%E5%B5%8C%E5%85%A5%E5%BC%8F/"}],"categories":[],"pages":[]}